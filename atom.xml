<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘硕的技术查阅手册</title>
  
  <subtitle>Python 全栈开发学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sliu.vip/"/>
  <updated>2020-04-19T16:56:16.945Z</updated>
  <id>https://sliu.vip/</id>
  
  <author>
    <name>刘硕</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多项式回归和过拟合与欠拟合的处理</title>
    <link href="https://sliu.vip/machine-learning/polynomial/"/>
    <id>https://sliu.vip/machine-learning/polynomial/</id>
    <published>2020-04-19T16:45:40.155Z</published>
    <updated>2020-04-19T16:56:16.945Z</updated>
    
    <summary type="html">
    
      直接使用线性回归，拟合出来的函数图像为一条直线。但有些时候，真实数据并不是线性相关的，这时，我们就可以使用多项式回归的方式，来获得一条更合适的你和曲线。其原理是，函数可以通过泰勒展开转换成多项式的形式。
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sliu.vip/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="机器学习" scheme="https://sliu.vip/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Scikit-Learn" scheme="https://sliu.vip/tags/Scikit-Learn/"/>
    
  </entry>
  
  <entry>
    <title>机器学习基础</title>
    <link href="https://sliu.vip/machine-learning/ml-basic/"/>
    <id>https://sliu.vip/machine-learning/ml-basic/</id>
    <published>2020-04-19T16:45:40.149Z</published>
    <updated>2020-04-19T16:56:16.942Z</updated>
    
    <summary type="html">
    
      机器学习最终进行预测出来的结果其实都是通过相关的算法计算出来的结果！所以说在机器学习中算法是核心，数据是计算的基础。
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sliu.vip/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="机器学习" scheme="https://sliu.vip/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>sklearn 的数据集</title>
    <link href="https://sliu.vip/machine-learning/sklearn-dataset/"/>
    <id>https://sliu.vip/machine-learning/sklearn-dataset/</id>
    <published>2020-04-19T16:45:40.144Z</published>
    <updated>2020-04-19T16:56:16.938Z</updated>
    
    <summary type="html">
    
      机器学习就是从数据中自动分析获得规律，并利用规律对未知数据进行预测。换句话说，我们的模型一定是要经过样本数据对其进行训练，才可以对未知数据进行预测的。
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sliu.vip/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="机器学习" scheme="https://sliu.vip/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Scikit-Learn" scheme="https://sliu.vip/tags/Scikit-Learn/"/>
    
  </entry>
  
  <entry>
    <title>K-近邻算法和交叉验证</title>
    <link href="https://sliu.vip/machine-learning/knn-cross/"/>
    <id>https://sliu.vip/machine-learning/knn-cross/</id>
    <published>2020-04-19T16:45:40.138Z</published>
    <updated>2020-04-19T16:56:16.935Z</updated>
    
    <summary type="html">
    
      简单地说，K-近邻算法（k-Nearest Neighbor，KNN）采用测量不同特征值之间的距离方法进行分类。k 值的选取不同将会影响到我们对测试数据类别的划分，所以不能随意选取。
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sliu.vip/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="机器学习" scheme="https://sliu.vip/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Scikit-Learn" scheme="https://sliu.vip/tags/Scikit-Learn/"/>
    
  </entry>
  
  <entry>
    <title>naive-bayes</title>
    <link href="https://sliu.vip/machine-learning/naive-bayes/"/>
    <id>https://sliu.vip/machine-learning/naive-bayes/</id>
    <published>2020-04-19T16:45:40.133Z</published>
    <updated>2020-04-19T16:56:16.931Z</updated>
    
    <summary type="html">
    
      在许多分类算法应用中，特征和标签之间的关系并非是决定性的。算法得出的结论，永远不是100%确定的，更多的是判断出了一种“样本的标签更可能是某类的可能性”，而非一种“确定”。我们通过模型算法的某些规定，来强行让算法为我们返回一个固定的分类结果。但许多时候，我们也希望能够理解算法判断出结果的可能性概率。无论如何，我们都希望使用真正的概率来衡量可能性，因此就有了真正的概率算法：朴素贝叶斯。
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sliu.vip/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="机器学习" scheme="https://sliu.vip/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Scikit-Learn" scheme="https://sliu.vip/tags/Scikit-Learn/"/>
    
  </entry>
  
  <entry>
    <title>线性回归和回归算法的评价指标</title>
    <link href="https://sliu.vip/machine-learning/linear-regression/"/>
    <id>https://sliu.vip/machine-learning/linear-regression/</id>
    <published>2020-04-19T16:45:40.125Z</published>
    <updated>2020-04-19T16:56:16.928Z</updated>
    
    <summary type="html">
    
      线性回归问题的目标值是连续性的值，而分类问题的目标值是离散型的值。线性回归的作用是找出特征和目标之间存在的某种趋势。在二维平面中，该种趋势可以用一条线段来表示。
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sliu.vip/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="机器学习" scheme="https://sliu.vip/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Scikit-Learn" scheme="https://sliu.vip/tags/Scikit-Learn/"/>
    
  </entry>
  
  <entry>
    <title>机器学习概述</title>
    <link href="https://sliu.vip/machine-learning/ml-abstract/"/>
    <id>https://sliu.vip/machine-learning/ml-abstract/</id>
    <published>2020-04-13T17:09:22.032Z</published>
    <updated>2020-04-19T16:56:16.924Z</updated>
    
    <summary type="html">
    
      机器学习（machine learning，ML）是实现人工智能（artificial intelligence，AI）的一种技术手段。机器学习要更加具体一点。机器学习的官方概念解释是：机器学习就是从数据中自动分析获得规律（模型），并利用规律对未知数据进行预测。
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sliu.vip/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="机器学习" scheme="https://sliu.vip/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>特征工程</title>
    <link href="https://sliu.vip/machine-learning/feature-engineering/"/>
    <id>https://sliu.vip/machine-learning/feature-engineering/</id>
    <published>2020-04-13T17:09:21.997Z</published>
    <updated>2020-04-19T16:56:16.920Z</updated>
    
    <summary type="html">
    
      样本数据中的特征有可能会存在缺失值，重复值，异常值等等，于是我们就需要对特征中的相关的噪点数据进行处理。处理数据的目的就是为了营造出一个更纯净的样本集，让模型基于这组数据可以有更好的预测能力。
    
    </summary>
    
    
      <category term="机器学习" scheme="https://sliu.vip/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="机器学习" scheme="https://sliu.vip/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://sliu.vip/algorithm/binary-tree/"/>
    <id>https://sliu.vip/algorithm/binary-tree/</id>
    <published>2020-04-12T16:32:23.514Z</published>
    <updated>2020-04-12T16:42:55.535Z</updated>
    
    <summary type="html">
    
      二叉树，顾名思义，就是只有两个分叉的树。二叉树的每个局部会有一个根节点和左叶子节点以及右叶子节点。二叉树数据结构可以快速查找序列中的元素，广泛应用于数据库中。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>插入排序和希尔排序</title>
    <link href="https://sliu.vip/algorithm/insert-shell/"/>
    <id>https://sliu.vip/algorithm/insert-shell/</id>
    <published>2020-04-12T16:32:23.507Z</published>
    <updated>2020-04-19T16:56:16.913Z</updated>
    
    <summary type="html">
    
      插入排序同选择排序和冒泡排序一样，原理很简单，但效率较低。希尔排序是在插入排序的基础上进行的优化，提高了效率。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>快速排序和归并排序</title>
    <link href="https://sliu.vip/algorithm/quick-merge/"/>
    <id>https://sliu.vip/algorithm/quick-merge/</id>
    <published>2020-04-12T16:32:23.498Z</published>
    <updated>2020-04-19T16:56:16.909Z</updated>
    
    <summary type="html">
    
      快速排序和归并排序是两种效率很高的排序算法，它们的平均时间复杂度都为 O(n log n)。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="https://sliu.vip/algorithm/binary-search/"/>
    <id>https://sliu.vip/algorithm/binary-search/</id>
    <published>2020-04-12T16:32:23.487Z</published>
    <updated>2020-04-19T16:56:16.906Z</updated>
    
    <summary type="html">
    
      二分查找是一种快速查找列表中元素的算法，只可以作用在有序序列中。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序和选择排序</title>
    <link href="https://sliu.vip/algorithm/bubble-selection/"/>
    <id>https://sliu.vip/algorithm/bubble-selection/</id>
    <published>2020-04-12T16:32:23.481Z</published>
    <updated>2020-04-19T16:56:16.902Z</updated>
    
    <summary type="html">
    
      冒泡排序和选择排序是两个经典的排序算法，实现原理简单，但是耗时相对较长。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>荏苒资讯 Feed 流系统文章推送</title>
    <link href="https://sliu.vip/project/renran-article-feed/"/>
    <id>https://sliu.vip/project/renran-article-feed/</id>
    <published>2020-04-12T16:32:22.751Z</published>
    <updated>2020-04-13T17:09:25.402Z</updated>
    
    <summary type="html">
    
      在前面实现了用户关注和取关以后，我们就可以在此基础上推送和拉取 Feed 流了。推送 Feed 流需要在作者发布内容或者定时发布内容以后实现，而拉取 Feed 流则在用户打开网页的时候出现。
    
    </summary>
    
    
      <category term="综合项目" scheme="https://sliu.vip/categories/%E7%BB%BC%E5%90%88%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Django" scheme="https://sliu.vip/tags/Django/"/>
    
      <category term="Django REST framework" scheme="https://sliu.vip/tags/Django-REST-framework/"/>
    
      <category term="实践项目" scheme="https://sliu.vip/tags/%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="荏苒资讯" scheme="https://sliu.vip/tags/%E8%8D%8F%E8%8B%92%E8%B5%84%E8%AE%AF/"/>
    
      <category term="Vue" scheme="https://sliu.vip/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>荏苒资讯用户关注功能</title>
    <link href="https://sliu.vip/project/renran-follow/"/>
    <id>https://sliu.vip/project/renran-follow/</id>
    <published>2020-04-12T16:32:22.729Z</published>
    <updated>2020-04-12T16:42:55.513Z</updated>
    
    <summary type="html">
    
      荏苒资讯用户关注功能。用户可以在文章页面关注或者取消关注作者。
    
    </summary>
    
    
      <category term="综合项目" scheme="https://sliu.vip/categories/%E7%BB%BC%E5%90%88%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Django" scheme="https://sliu.vip/tags/Django/"/>
    
      <category term="Django REST framework" scheme="https://sliu.vip/tags/Django-REST-framework/"/>
    
      <category term="实践项目" scheme="https://sliu.vip/tags/%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="荏苒资讯" scheme="https://sliu.vip/tags/%E8%8D%8F%E8%8B%92%E8%B5%84%E8%AE%AF/"/>
    
      <category term="Vue" scheme="https://sliu.vip/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="https://sliu.vip/algorithm/queue/"/>
    <id>https://sliu.vip/algorithm/queue/</id>
    <published>2020-04-08T17:23:26.559Z</published>
    <updated>2020-04-09T07:48:06.831Z</updated>
    
    <summary type="html">
    
      队列是一种先进先出的数据类型。在这里我们将通过 Python 代码创建要给对列。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法概述</title>
    <link href="https://sliu.vip/algorithm/data-structure-algorithm/"/>
    <id>https://sliu.vip/algorithm/data-structure-algorithm/</id>
    <published>2020-04-08T17:23:26.555Z</published>
    <updated>2020-04-09T07:48:06.825Z</updated>
    
    <summary type="html">
    
      数据结构和算法思想的通用性异常的强大，在任何语言中都被使用，它们将会是我们编码生涯中伴随我们最长久利器（左膀右臂）。有一定经验的程序员最终拼的就是算法和数据结构。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="https://sliu.vip/algorithm/stack/"/>
    <id>https://sliu.vip/algorithm/stack/</id>
    <published>2020-04-08T17:23:26.550Z</published>
    <updated>2020-04-09T07:48:06.815Z</updated>
    
    <summary type="html">
    
      栈是一种先进后出的数据结构。从栈顶向栈底添加元素，从栈顶取元素。我们将通过 Python 代码实现一个栈。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>顺序表和链表</title>
    <link href="https://sliu.vip/algorithm/linked-list/"/>
    <id>https://sliu.vip/algorithm/linked-list/</id>
    <published>2020-04-08T17:23:26.542Z</published>
    <updated>2020-04-12T16:32:25.891Z</updated>
    
    <summary type="html">
    
      顺序表数据结构中存储的元素是有顺序的，顺序表的结构可以分为两种形式：单数据类型（数组）和多数据类型（列表）。顺序表数据结构中存储的元素是有顺序的，顺序表的结构可以分为两种形式：单数据类型（数组）和多数据类型（列表）。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据结构性能分析</title>
    <link href="https://sliu.vip/algorithm/python-performance-analysis/"/>
    <id>https://sliu.vip/algorithm/python-performance-analysis/</id>
    <published>2020-04-08T17:23:26.534Z</published>
    <updated>2020-04-09T07:48:06.797Z</updated>
    
    <summary type="html">
    
      除了使用大 O 表示法，我们也可以通过 timit 模块来对一段代码的运行时间进行测试。根据时间的开销，我们可以评定一段代码的优劣。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
