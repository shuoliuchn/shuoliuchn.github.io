<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘硕的技术查阅手册</title>
  
  <subtitle>Python 全栈开发学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sliu.vip/"/>
  <updated>2020-04-12T16:42:55.535Z</updated>
  <id>https://sliu.vip/</id>
  
  <author>
    <name>刘硕</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉树</title>
    <link href="https://sliu.vip/algorithm/binary-tree/"/>
    <id>https://sliu.vip/algorithm/binary-tree/</id>
    <published>2020-04-12T16:32:23.514Z</published>
    <updated>2020-04-12T16:42:55.535Z</updated>
    
    <summary type="html">
    
      二叉树，顾名思义，就是只有两个分叉的树。二叉树的每个局部会有一个根节点和左叶子节点以及右叶子节点。二叉树数据结构可以快速查找序列中的元素，广泛应用于数据库中。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>插入排序和希尔排序</title>
    <link href="https://sliu.vip/algorithm/insert-shell/"/>
    <id>https://sliu.vip/algorithm/insert-shell/</id>
    <published>2020-04-12T16:32:23.507Z</published>
    <updated>2020-04-12T16:42:55.532Z</updated>
    
    <summary type="html">
    
      插入排序同选择排序和冒泡排序一样，原理很简单，但效率较低。希尔排序是在插入排序的基础上进行的优化，提高了效率。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速排序和归并排序</title>
    <link href="https://sliu.vip/algorithm/quick-merge/"/>
    <id>https://sliu.vip/algorithm/quick-merge/</id>
    <published>2020-04-12T16:32:23.498Z</published>
    <updated>2020-04-12T16:42:55.528Z</updated>
    
    <summary type="html">
    
      快速排序和归并排序是两种效率很高的排序算法，它们的平均时间复杂度都为 O(n log n)。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="https://sliu.vip/algorithm/binary-search/"/>
    <id>https://sliu.vip/algorithm/binary-search/</id>
    <published>2020-04-12T16:32:23.487Z</published>
    <updated>2020-04-12T16:42:55.525Z</updated>
    
    <summary type="html">
    
      二分查找是一种快速查找列表中元素的算法，只可以作用在有序序列中。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序和选择排序</title>
    <link href="https://sliu.vip/algorithm/bubble-selection/"/>
    <id>https://sliu.vip/algorithm/bubble-selection/</id>
    <published>2020-04-12T16:32:23.481Z</published>
    <updated>2020-04-12T16:42:55.521Z</updated>
    
    <summary type="html">
    
      冒泡排序和选择排序是两个经典的排序算法，实现原理简单，但是耗时相对较长。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>荏苒资讯 Feed 流系统文章推送</title>
    <link href="https://sliu.vip/project/renran-article-feed/"/>
    <id>https://sliu.vip/project/renran-article-feed/</id>
    <published>2020-04-12T16:32:22.751Z</published>
    <updated>2020-04-12T16:42:55.518Z</updated>
    
    <summary type="html">
    
      在前面实现了用户关注和取关以后，我们就可以在此基础上推送和拉取 Feed 流了。推送 Feed 流需要在作者发布内容或者定时发布内容以后实现，而拉取 Feed 流则在用户打开网页的时候出现。
    
    </summary>
    
    
      <category term="综合项目" scheme="https://sliu.vip/categories/%E7%BB%BC%E5%90%88%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Django" scheme="https://sliu.vip/tags/Django/"/>
    
      <category term="Django REST framework" scheme="https://sliu.vip/tags/Django-REST-framework/"/>
    
      <category term="实践项目" scheme="https://sliu.vip/tags/%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="荏苒资讯" scheme="https://sliu.vip/tags/%E8%8D%8F%E8%8B%92%E8%B5%84%E8%AE%AF/"/>
    
      <category term="Vue" scheme="https://sliu.vip/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>荏苒资讯用户关注功能</title>
    <link href="https://sliu.vip/project/renran-follow/"/>
    <id>https://sliu.vip/project/renran-follow/</id>
    <published>2020-04-12T16:32:22.729Z</published>
    <updated>2020-04-12T16:42:55.513Z</updated>
    
    <summary type="html">
    
      荏苒资讯用户关注功能。用户可以在文章页面关注或者取消关注作者。
    
    </summary>
    
    
      <category term="综合项目" scheme="https://sliu.vip/categories/%E7%BB%BC%E5%90%88%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Django" scheme="https://sliu.vip/tags/Django/"/>
    
      <category term="Django REST framework" scheme="https://sliu.vip/tags/Django-REST-framework/"/>
    
      <category term="实践项目" scheme="https://sliu.vip/tags/%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="荏苒资讯" scheme="https://sliu.vip/tags/%E8%8D%8F%E8%8B%92%E8%B5%84%E8%AE%AF/"/>
    
      <category term="Vue" scheme="https://sliu.vip/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="https://sliu.vip/algorithm/queue/"/>
    <id>https://sliu.vip/algorithm/queue/</id>
    <published>2020-04-08T17:23:26.559Z</published>
    <updated>2020-04-09T07:48:06.831Z</updated>
    
    <summary type="html">
    
      队列是一种先进先出的数据类型。在这里我们将通过 Python 代码创建要给对列。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法概述</title>
    <link href="https://sliu.vip/algorithm/data-structure-algorithm/"/>
    <id>https://sliu.vip/algorithm/data-structure-algorithm/</id>
    <published>2020-04-08T17:23:26.555Z</published>
    <updated>2020-04-09T07:48:06.825Z</updated>
    
    <summary type="html">
    
      数据结构和算法思想的通用性异常的强大，在任何语言中都被使用，它们将会是我们编码生涯中伴随我们最长久利器（左膀右臂）。有一定经验的程序员最终拼的就是算法和数据结构。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="https://sliu.vip/algorithm/stack/"/>
    <id>https://sliu.vip/algorithm/stack/</id>
    <published>2020-04-08T17:23:26.550Z</published>
    <updated>2020-04-09T07:48:06.815Z</updated>
    
    <summary type="html">
    
      栈是一种先进后出的数据结构。从栈顶向栈底添加元素，从栈顶取元素。我们将通过 Python 代码实现一个栈。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>顺序表和链表</title>
    <link href="https://sliu.vip/algorithm/linked-list/"/>
    <id>https://sliu.vip/algorithm/linked-list/</id>
    <published>2020-04-08T17:23:26.542Z</published>
    <updated>2020-04-12T16:32:25.891Z</updated>
    
    <summary type="html">
    
      顺序表数据结构中存储的元素是有顺序的，顺序表的结构可以分为两种形式：单数据类型（数组）和多数据类型（列表）。顺序表数据结构中存储的元素是有顺序的，顺序表的结构可以分为两种形式：单数据类型（数组）和多数据类型（列表）。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据结构性能分析</title>
    <link href="https://sliu.vip/algorithm/python-performance-analysis/"/>
    <id>https://sliu.vip/algorithm/python-performance-analysis/</id>
    <published>2020-04-08T17:23:26.534Z</published>
    <updated>2020-04-09T07:48:06.797Z</updated>
    
    <summary type="html">
    
      除了使用大 O 表示法，我们也可以通过 timit 模块来对一段代码的运行时间进行测试。根据时间的开销，我们可以评定一段代码的优劣。
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="算法" scheme="https://sliu.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据分析总结</title>
    <link href="https://sliu.vip/data-analysis/data-analysis-summary/"/>
    <id>https://sliu.vip/data-analysis/data-analysis-summary/</id>
    <published>2020-04-07T17:13:27.363Z</published>
    <updated>2020-04-08T04:29:27.401Z</updated>
    
    <summary type="html">
    
      总结一下数据分析三剑客（NumPy、Pandas 和 Matplotlib）的常用方法。
    
    </summary>
    
    
      <category term="数据分析" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="数据分析" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="NumPy" scheme="https://sliu.vip/tags/NumPy/"/>
    
      <category term="Pandas" scheme="https://sliu.vip/tags/Pandas/"/>
    
      <category term="Matplotlib" scheme="https://sliu.vip/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>用户消费行为分析案例</title>
    <link href="https://sliu.vip/data-analysis/consumption-behavior/"/>
    <id>https://sliu.vip/data-analysis/consumption-behavior/</id>
    <published>2020-04-07T17:13:27.347Z</published>
    <updated>2020-04-08T04:29:27.397Z</updated>
    
    <summary type="html">
    
      电商平台每天都会产生大量的用户购买商品的消费行为数据。通过分析这些数据，我们可以了解电商的运营情况，用户的消费规律等信息。有了这些信息，我们可以完善平台建设，预测用户的消费行为，从而提高用户体验。这个案例将综合使用我们数据分析的各种模块。
    
    </summary>
    
    
      <category term="数据分析" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="数据分析" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="NumPy" scheme="https://sliu.vip/tags/NumPy/"/>
    
      <category term="Pandas" scheme="https://sliu.vip/tags/Pandas/"/>
    
      <category term="Matplotlib" scheme="https://sliu.vip/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>2012 美国大选献金项目数据分析</title>
    <link href="https://sliu.vip/data-analysis/political-contributions/"/>
    <id>https://sliu.vip/data-analysis/political-contributions/</id>
    <published>2020-04-06T17:44:28.573Z</published>
    <updated>2020-04-08T04:29:27.392Z</updated>
    
    <summary type="html">
    
      众所周知，美国大选是一个非常耗钱的事情。每个总统参加竞选时，都需要大量的经费。这些经费，几乎不会由候选人自己出，它们往往来自于政治献金。通过对政治献金数据的分析，练习一下 Pandas 的各种方法。
    
    </summary>
    
    
      <category term="数据分析" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="数据分析" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://sliu.vip/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib 绘图基础</title>
    <link href="https://sliu.vip/data-analysis/matplotlib-basic/"/>
    <id>https://sliu.vip/data-analysis/matplotlib-basic/</id>
    <published>2020-04-06T17:44:28.526Z</published>
    <updated>2020-04-08T04:29:27.389Z</updated>
    
    <summary type="html">
    
      我们使用 Pandas 千辛万苦处理出来一些数据，却发现，这些数据仍然很抽象。如果没有参与运算，或者对数字不是那么敏感的话，可能一时找不到这里面的规律。这时，我们可以考虑把数据绘制成图表，让其仍容易理解，一目了然。
    
    </summary>
    
    
      <category term="数据分析" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="数据分析" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Matplotlib" scheme="https://sliu.vip/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>seaborn 基本用法</title>
    <link href="https://sliu.vip/data-analysis/seaborn-abc/"/>
    <id>https://sliu.vip/data-analysis/seaborn-abc/</id>
    <published>2020-04-06T17:44:28.521Z</published>
    <updated>2020-04-08T04:29:27.385Z</updated>
    
    <summary type="html">
    
      除了 Matplotlib 之外，seaborn 也是一个用来绘制图像，实现数据可视化的工具。Matplotlib 试着让简单的事情更加简单，困难的事情变得可能，而 seaborn 就是让困难的东西更加简单。
    
    </summary>
    
    
      <category term="数据分析" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="数据分析" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="seaborn" scheme="https://sliu.vip/tags/seaborn/"/>
    
  </entry>
  
  <entry>
    <title>DataFrame 的级联与合并操作</title>
    <link href="https://sliu.vip/data-analysis/df-concate-merge/"/>
    <id>https://sliu.vip/data-analysis/df-concate-merge/</id>
    <published>2020-04-05T16:39:58.232Z</published>
    <updated>2020-04-08T04:29:27.382Z</updated>
    
    <summary type="html">
    
      有的时候，我们的数据可能会来自不同的文件。读取每个文件时，会产生一个 DataFrame。如果我们想要综合这些文件中的数据，就需要将多个表格整合成一个大表格。就类似于我们使用 MySQL 数据库，对于不同表进行的联表操作一样。要将多个 DataFrame 整合成一个大的综合的 DataFrame，就需要使用到 DataFrame 的级联与合并操作。
    
    </summary>
    
    
      <category term="数据分析" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="数据分析" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://sliu.vip/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas 高级操作</title>
    <link href="https://sliu.vip/data-analysis/pandas-advanced/"/>
    <id>https://sliu.vip/data-analysis/pandas-advanced/</id>
    <published>2020-04-05T16:39:58.210Z</published>
    <updated>2020-04-08T04:29:27.378Z</updated>
    
    <summary type="html">
    
      Pandas 的一些高级用法，包括：替换操作、映射操作、运算工具、排序实现的随机抽样、数据的分类分组处理、高级数据聚合、数据加载、透视表和交叉表等操作。
    
    </summary>
    
    
      <category term="数据分析" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="数据分析" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://sliu.vip/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>人口分析案例</title>
    <link href="https://sliu.vip/data-analysis/population-analysis/"/>
    <id>https://sliu.vip/data-analysis/population-analysis/</id>
    <published>2020-04-05T16:39:58.197Z</published>
    <updated>2020-04-08T04:29:27.375Z</updated>
    
    <summary type="html">
    
      现有美国各州数年人口普查的数据，需要进行各种分析操作。主要用来练习一些 Pandas 的常用方法。
    
    </summary>
    
    
      <category term="数据分析" scheme="https://sliu.vip/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://sliu.vip/tags/Python/"/>
    
      <category term="Anaconda" scheme="https://sliu.vip/tags/Anaconda/"/>
    
      <category term="数据分析" scheme="https://sliu.vip/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://sliu.vip/tags/Pandas/"/>
    
  </entry>
  
</feed>
